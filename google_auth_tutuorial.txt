 
 remember to install the latest version of firebase 
 // to add a google button: npm install react-google-button
 
 
 
 //IN THE FIREBASE FILE :
 
 
import {getAuth} from "firebase/auth";

//paste the boiler plate that you get from the site and keep the variable "app" 

export const auth = getAuth(app);




IN THE CONTROLLER FILE (IN THIS CASE THE SIGN IN PAGE):


//import {auth} from "the firebase file";
import {GoogleAuthProvider,signInWithPopup,signOut,onAuthStateChanged} from "firebase/auth";
//import {signInWithRedirect} from "firebase/auth"; // for mobile

//you could also import signInWithRedirect if you want it

//the onAuthStateChanged can be used to check if a user is authenticated or not


//make a function (or a method if it is the best fit) called signInWithGoogle that triggers all that and attach it to the handler function that controls the button eg:

signInWithGoogle(){

	const provider = new GoogleAuthProvider();
	signInWithPopup(auth,provider);
	//signInWithRedirect(auth,provider);//if youre using mobile
};




handleSignIn = async event => {
	event.preventDefault();
	try{
		await signInWithGoogle();
		///////find a way to conditionally redirect user to their validated page if they are logged in (i.e if user!== null) , this may not happen in this block ,  find the appropriate block for that
	}catch(error){
		console.log(err.message);
	}

}


//so on the handler button, pass the handler function eg:

<CustomButton onclick={handleSignIn}>

//so go check if the user has switched authentication state (in this case ,  sign out or sign in) in the componentDidMount method of the signUp state Component(not 100% sure check it out where yihua placed his) like:

class SignIn extends React.Component{...
...
...
	this.state = {
		user: null,
	}
	
//create an instance field called user and set it to this.state.user eg:

export const user = this.state.user; //coz we gonna need it on the navbar for conditional rendering

//although the below code was implemented differently syntatically , but i guess that was a react hook
componentDidMount(){
	onAuthStateChanged(auth,(currentUser)=>{
		this.setState((_)=>{
			return {user: currentUSer};
		},()=>{
			console.log(currentUser);
		})
	)
}

...
...



//make a function (or a method if it is the best fit) called handleSignOut that triggers all that and attach it to the handler function that controls the clicked button eg:



handleSignOut = async (event)=>{
	event.preventDefault();
	await signOut(auth);
	///////find a way to conditionally redirect user to the home page if they are logged out (i.e if user === null) , this may not happen in this block ,  find the appropriate block for that
}


//render conditionally on the navBar a logout button when the user is logged in and a login button when a user is logged out eg:

//but how do we send state to the navBar one of the most parent elements ? 
//use an export 

{user?<button onClick={handleSignOut}>LOGOUT</button>:<Link to="/auth">}




















 

